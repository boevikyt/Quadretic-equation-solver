#include <cstdio>
#include <cmath>
#include <stdexcept>

class QuadraticEquationSolver {
private:
    double a, b, c;
    double discriminant;
    bool calculated;

    struct Roots {
        double x1;
        double x2;
        bool hasRealRoots;
    } roots;

    void calculateDiscriminant() {
        discriminant = b * b - 4 * a * c;
        calculated = false;
    }

    void calculateRoots() {
        if (a == 0) {
            throw std::invalid_argument("Coefficient 'a' cannot be zero");
        }

        if (!calculated) {
            if (discriminant > 0) {
                roots.x1 = (-b + sqrt(discriminant)) / (2 * a);
                roots.x2 = (-b - sqrt(discriminant)) / (2 * a);
                roots.hasRealRoots = true;
            } else if (discriminant == 0) {
                roots.x1 = roots.x2 = -b / (2 * a);
                roots.hasRealRoots = true;
            } else {
                roots.hasRealRoots = false;
            }
            calculated = true;
        }
    }

public:
    QuadraticEquationSolver(double a = 1.0, double b = 0.0, double c = 0.0) 
        : a(a), b(b), c(c), calculated(false) {
        if (a == 0) {
            throw std::invalid_argument("Coefficient 'a' cannot be zero");
        }
        calculateDiscriminant();
    }

    void setCoefficients(double newA, double newB, double newC) {
        a = newA;
        b = newB;
        c = newC;
        if (a == 0) {
            throw std::invalid_argument("Coefficient 'a' cannot be zero");
        }
        calculateDiscriminant();
    }

    double getDiscriminant() const {
        return discriminant;
    }

    Roots getRoots() {
        calculateRoots();
        return roots;
    }

    void printSolution() {
        calculateRoots();
        
        printf("Equation: %.2fxÂ² + %.2fx + %.2f = 0\n", a, b, c);
        printf("Discriminant: %.2f\n", discriminant);

        if (roots.hasRealRoots) {
            if (discriminant > 0) {
                printf("Two real roots:\n");
                printf("x1 = %.2f\n", roots.x1);
                printf("x2 = %.2f\n", roots.x2);
            } else {
                printf("One real root (double):\n");
                printf("x = %.2f\n", roots.x1);
            }
        } else {
            double realPart = -b / (2 * a);
            double imaginaryPart = sqrt(-discriminant) / (2 * a);
            printf("Complex roots:\n");
            printf("x1 = %.2f + %.2fi\n", realPart, imaginaryPart);
            printf("x2 = %.2f - %.2fi\n", realPart, imaginaryPart);
        }
    }
};

int main() {
    try {
        QuadraticEquationSolver eq1(1, -3, 2); 
        eq1.printSolution();
        printf("\n");

        QuadraticEquationSolver eq2(1, -2, 1);
        eq2.printSolution();
        printf("\n");

        QuadraticEquationSolver eq3(1, 0, 1); 
        eq3.printSolution();
        printf("\n");

        eq3.setCoefficients(2, 5, -3); 
        eq3.printSolution();

    } catch (const std::invalid_argument& e) {
        printf("Error: %s\n", e.what());
    }

    return 0;
}
