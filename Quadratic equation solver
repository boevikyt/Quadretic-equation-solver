#include <cstdio>
#include <cmath>
#include <stdexcept>
#include <tuple>

class QuadraticEquationSolver {
private:
    double a, b, c;
    double discriminant;

    void calculateDiscriminant() {
        discriminant = b * b - 4 * a * c;
    }

public:
    QuadraticEquationSolver(double a = 1.0, double b = 0.0, double c = 0.0) 
        : a(a), b(b), c(c) {
        if (a == 0) {
            throw std::invalid_argument("Coefficient 'a' cannot be zero");
        }
        calculateDiscriminant();
    }

    void setCoefficients(double newA, double newB, double newC) {
        a = newA;
        b = newB;
        c = newC;
        if (a == 0) {
            throw std::invalid_argument("Coefficient 'a' cannot be zero");
        }
        calculateDiscriminant();
    }

    double getDiscriminant() const {
        return discriminant;
    }

    std::tuple<bool, double, double> getRoots() {
        if (discriminant > 0) {
            double x1 = (-b + sqrt(discriminant)) / (2 * a);
            double x2 = (-b - sqrt(discriminant)) / (2 * a);
            return {true, x1, x2}; // Два действительных корня
        } else if (discriminant == 0) {
            double x = -b / (2 * a);
            return {true, x, x}; // Один двойной корень
        } else {
            return {false, 0.0, 0.0}; // Нет действительных корней
        }
    }

    void printSolution() {
        calculateDiscriminant();
        
        printf("Equation: %.2fx² + %.2fx + %.2f = 0\n", a, b, c);
        printf("Discriminant: %.2f\n", discriminant);

        auto [hasRealRoots, x1, x2] = getRoots();
        
        if (hasRealRoots) {
            if (discriminant > 0) {
                printf("Two real roots:\n");
                printf("x1 = %.2f\n", x1);
                printf("x2 = %.2f\n", x2);
            } else {
                printf("One real root (double):\n");
                printf("x = %.2f\n", x1);
            }
        } else {
            double realPart = -b / (2 * a);
            double imaginaryPart = sqrt(-discriminant) / (2 * a);
            printf("Complex roots:\n");
            printf("x1 = %.2f + %.2fi\n", realPart, imaginaryPart);
            printf("x2 = %.2f - %.2fi\n", realPart, imaginaryPart);
        }
    }
};

int main() {
    try {
        QuadraticEquationSolver eq1(1, -3, 2); // x² - 3x + 2 = 0
        eq1.printSolution();
        printf("\n");

        QuadraticEquationSolver eq2(1, -2, 1); // x² - 2x + 1 = 0
        eq2.printSolution();
        printf("\n");

        QuadraticEquationSolver eq3(1, 0, 1); // x² + 1 = 0
        eq3.printSolution();
        printf("\n");

        eq3.setCoefficients(2, 5, -3); // 2x² + 5x - 3 = 0
        eq3.printSolution();

    } catch (const std::invalid_argument& e) {
        printf("Error: %s\n", e.what());
    }

    return 0;
}
